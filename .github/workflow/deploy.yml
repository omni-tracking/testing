name: Deploy_Fargate

on:
  push:
    branches:
      # - main
      # - prod
      - do_nothing

jobs:
  # test-lint:
  #   uses: ./.github/workflows/test-and-lint.yml
  #   name: Test and Lint
  #   secrets:
  #     DOCKERHUB_USER: ${{ vars.DOCKERHUB_USER }}
  #     DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  deploy:
    name: Deploy
    runs-on: ubuntu-22.04
    # needs: [test-lint]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set vars
        run: |
          if [[ $GITHUB_REF == 'refs/heads/prod' ]]; then
            echo "prod" > .workspace
          else
          echo "staging" > .workspace
          fi

      - name: Push to ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecr get-login-password --region ap-southeast-1 | 
          docker login --username AWS --password-stdin ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com

          cd ox_nest/
          docker build --compress -t ${{ vars.ECR_REPO_ox_NEST }}:$GITHUB_SHA .
          docker push ${{ vars.ECR_REPO_ox_NEST }}:$GITHUB_SHA

          cd ../ox_next/
          docker build --compress -t ${{ vars.ECR_REPO_ox_NEXT }}:$GITHUB_SHA .
          docker push ${{ vars.ECR_REPO_ox_NEXT }}:$GITHUB_SHA

          cd ../ox_report/
          docker build --compress -t ${{ vars.ECR_REPO_ox_REPORT }}:$GITHUB_SHA .
          docker push ${{ vars.ECR_REPO_ox_REPORT }}:$GITHUB_SHA

      - name: Terraform Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
        run: |
          export TF_VAR_ecr_repo_api_sys="${{ vars.ECR_REPO_ox_NEST }}:$GITHUB_SHA"
          export TF_VAR_ecr_repo_api_app="${{ vars.ECR_REPO_ox_NEXT }}:$GITHUB_SHA"
          export TF_VAR_ecr_repo_report="${{ vars.ECR_REPO_ox_REPORT }}:$GITHUB_SHA"
          workspace=$(cat .workspace)
          cd infra/
          docker compose run --rm terraform -chdir=deploy/ init
          docker compose run --rm terraform -chdir=deploy/ workspace select -or-create $workspace
          docker compose run --rm terraform -chdir=deploy/ apply -auto-approve
